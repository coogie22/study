자바스크립트에서 `this`는 함수가 어떻게 호출되냐에 따라 값이 바뀜. 호출 방식에 따라 다른 객체를 가리킨다

### 1. **전역 문맥에서의 `this`**
전역에서 `this`는 **전역 객체**를 가리킴.
- 브라우저에선 `window`
- Node.js에선 `global`

```javascript
console.log(this); // 브라우저에선 window
```

### 2. **일반 함수에서의 `this`**
일반 함수에서 `this`는 전역 객체를 가리킴. `strict mode`에선 `undefined`가 됨.

```javascript
function sayHello() {
    console.log(this); // window (strict mode에선 undefined)
}
sayHello();
```

### 3. **메서드에서의 `this`**
객체 메서드에서 `this`는 그 **객체**를 가리킴.

```javascript
const person = {
    name: 'Alice',
    greet() {
        console.log(this.name); // 'Alice'
    }
};

person.greet();
```

### 4. **생성자 함수에서의 `this`**
`new`로 호출된 생성자 함수에서 `this`는 새로 만들어진 객체를 가리킴.

```javascript
function Person(name) {
    this.name = name;
}

const alice = new Person('Alice');
console.log(alice.name); // 'Alice'
```

### 5. **화살표 함수에서의 `this`**
화살표 함수는 `this`가 없음. 대신 **상위 스코프**의 `this`를 가리킴.

```javascript
const person = {
    name: 'Alice',
    greet: function() {
        const innerFunc = () => {
            console.log(this.name); // 'Alice', 상위 스코프의 this
        };
        innerFunc();
    }
};

person.greet();
```

### 6. **명시적으로 `this` 지정하기**
- **`call()`**, **`apply()`**: 함수 호출하면서 `this`를 직접 지정함.
- **`bind()`**: `this`가 영구적으로 바인딩된 새 함수 반환.

```javascript
function greet() {
    console.log(this.name);
}

const person = { name: 'Alice' };
greet.call(person);  // 'Alice'
```

이렇게 `this`는 상황에 따라 달라지니 어떻게 호출되는지 잘 봐야 함