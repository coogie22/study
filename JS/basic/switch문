사실 for문을 알고 있다면 몰라도 됨 if else만 사용해도 프로그램을 작성할 수 있기 때문

근데 사용하는 이유는 케이스가 다양할 경우 보다 강렬하게 작성할 수 있음

이 코드는 **`switch` 문**을 사용하여 변수 `fruit`에 저장된 값에 따라 서로 다른 작업을 수행하는 예시입니다. **과일 이름에 따라 가격을 출력**하는 간단한 프로그램입니다.

### 코드 설명:

```jsx
switch (fruit) {
    case "사과":
        console.log("100원입니다.");
        break;
    case "바나나":
        console.log("200원입니다.");
        break;
    case "키위":
        console.log("300원입니다.");
        break;
    case "멜론":
    case "수박":
        console.log("500원입니다.");
        break;
    default:
        console.log("그런 과일은 없습니다.");
}

```

### 동작 원리:

1. **`switch(fruit)`**:
    - `fruit` 변수의 값을 기반으로 여러 가지 **조건(case)** 중 하나를 선택합니다. `fruit`의 값이 `"사과"`, `"바나나"`, `"키위"`, `"멜론"`, `"수박"`, 또는 그 외의 값일 때 각각 다른 동작을 수행합니다.
2. **`case "사과"`**:
    - `fruit`의 값이 `"사과"`라면 `"100원입니다."`라는 메시지를 출력하고 **`break`*를 통해 `switch` 문을 빠져나옵니다.
3. **`case "바나나"`**:
    - `fruit`의 값이 `"바나나"`라면 `"200원입니다."`라는 메시지를 출력하고 `break`로 `switch` 문을 빠져나옵니다.
4. **`case "키위"`**:
    - `fruit`의 값이 `"키위"`라면 `"300원입니다."`라는 메시지를 출력하고 `break`로 빠져나옵니다.
5. **`case "멜론"`과 `case "수박"`**:
    - `fruit`의 값이 `"멜론"` 또는 `"수박"`일 때, `"500원입니다."`라는 메시지를 출력합니다.
    - `case "멜론"`과 `case "수박"`는 **break 문을 공유**합니다. 즉, 둘 중 어느 조건이 맞아도 동일한 메시지가 출력됩니다.
6. **`default`**:
    - 위의 모든 `case`에서 일치하는 값이 없는 경우, `"그런 과일은 없습니다."`가 출력됩니다. **`default`*는 모든 조건에 해당하지 않을 때 실행되는 블록입니다.
7. **`break`**:
    - *`break`*는 해당 `case`에서의 작업이 끝난 후 **`switch` 문을 빠져나오게** 만듭니다.
    - `break`가 없으면 **다음 `case`로 계속 넘어가서 실행**될 수 있기 때문에, 각 조건이 끝날 때마다 `break`로 종료해야 합니다.

### 요약:

- 이 코드는 **과일 이름에 따라 가격을 출력**하는 코드입니다.
- `fruit`이 `"사과"`면 100원, `"바나나"`면 200원, `"키위"`면 300원, `"멜론"`이나 `"수박"`이면 500원이 출력됩니다.
- `fruit`이 해당하지 않는 다른 값이면 `"그런 과일은 없습니다."`라는 메시지가 출력됩니다.

### `switch` 문을 사용하는 이유:

- `switch` 문은 여러 `if-else` 조건을 대체할 수 있으며, 코드의 가독성을 높이고 조건을 명확하게 구분하는 데 유리합니다.