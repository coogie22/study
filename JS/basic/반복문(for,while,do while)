for문

```jsx
for(let i = 0; i < 4; i++) {
    console.log(i+1)
}
```

네, **`else` 문**을 사용하지 않고, **`for` 문**과 **`else if` 문**만 사용하는 것이 가능합니다. 만약 어느 조건도 만족하지 않았을 때 아무 작업도 하지 않기를 원한다면, **`else` 문을 생략**하면 됩니다.

### 예시:

```jsx
for (let i = 0; i < 5; i++) {
    if (i === 1) {
        console.log("i는 1입니다.");
    } else if (i === 3) {
        console.log("i는 3입니다.");
    }
    // else 문이 없기 때문에 i가 1이나 3이 아니면 아무 일도 일어나지 않음
}

```

### 이 코드의 동작:

- `i`가 1일 때는 `"i는 1입니다."`를 출력.
- `i`가 3일 때는 `"i는 3입니다."`를 출력.
- `i`가 1이나 3이 아닌 경우, 즉 조건이 맞지 않으면 **아무 일도 일어나지 않음**.

### 결론:

- **`else` 문은 필수가 아닙니다**. 조건이 맞지 않을 때 아무 동작도 하지 않기를 원한다면 생략할 수 있습니다.
- **`else` 문**은 "위의 조건들이 모두 `false`일 때 기본적으로 실행할 작업"이 있을 때만 필요합니다.

while문

```jsx
let i = 0;

while(i<10){
    console.log(i);
    i++;
}
```

do while문

break

```jsx
while(true){
    let answer = confirm("계속 할까요?");
    if(!answer){
        break;
    }
}
```

continue

```jsx
for(let i = 0; i < 10; i++){
    if(i%2){
        continue;
    }
    console.log(i);
}
```

이 코드는 `0`부터 `9`까지의 숫자 중 **짝수만 출력**하는 코드입니다. 각 부분을 상세히 설명해드리겠습니다.

### 코드 설명:

```jsx
for (let i = 0; i < 10; i++) {
    if (i % 2) {        // i를 2로 나눈 나머지가 1이면 (즉, 홀수이면)
        continue;        // 반복문의 나머지 부분을 건너뛰고 다음 반복으로 넘어감
    }
    console.log(i);      // i가 짝수일 때만 출력됨
}

```

### 동작 원리:

1. **`for (let i = 0; i < 10; i++)`**:
    - **초기값** `i = 0`에서 시작하여, `i`가 `10` 미만일 때까지 반복합니다.
    - 매 반복마다 `i`는 1씩 증가합니다.
2. **`if (i % 2)`**:
    - `i % 2`는 `i`를 2로 나눈 **나머지를 계산**합니다.
        - 홀수일 때는 나머지가 `1`이므로, 조건이 `true`가 됩니다.
        - 짝수일 때는 나머지가 `0`이므로, 조건이 `false`가 됩니다.
3. **`continue`**:
    - 조건이 **`true`(즉, i가 홀수일 때)**, `continue`가 실행되어 **이후 코드를 건너뛰고** 다음 반복으로 넘어갑니다.
    - 즉, `console.log(i)`는 실행되지 않고 다음 반복으로 넘어갑니다.
4. **`console.log(i)`**:
    - 이 부분은 `i`가 짝수일 때만 실행됩니다.
    - `i`가 홀수이면 `continue`에 의해 건너뛰지만, 짝수일 때는 `console.log(i)`가 실행되어 `i`값이 출력됩니다.

### 출력 결과:

```
0
2
4
6
8

```

### 요약:

- **`i`가 짝수일 때만 `console.log(i)`가 실행**됩니다.
- *`continue`*는 홀수인 경우 나머지 코드를 건너뛰게 하므로, **홀수는 출력되지 않습니다**.

**`while` 문**과 **`do...while` 문**의 차이는 **반복 조건을 확인하는 시점**에 있습니다. 두 반복문 모두 조건에 따라 반복을 수행하지만, 그 조건을 언제 평가하느냐에 따라 동작이 다릅니다.

### 1. `while` 문

- **조건을 먼저 평가**하고, 조건이 `true`일 때만 반복을 수행합니다.
- **조건이 처음부터 `false`라면** 반복문 내부의 코드가 **한 번도 실행되지 않을 수 있습니다**.

### 예시:

```jsx
let i = 0;

while (i < 3) {
    console.log(i);  // 0, 1, 2 출력
    i++;
}

```

- `i`가 0부터 3 미만일 때까지 반복하며, 조건이 처음부터 `true`일 경우에만 반복이 시작됩니다.

### 2. `do...while` 문

- **코드를 먼저 실행**하고 나서, **반복이 끝난 후에 조건을 평가**합니다.
- **조건이 처음부터 `false`이더라도** 반복문 내부의 코드는 **최소한 한 번은 실행됩니다**.

### 예시:

```jsx
let i = 0;

do {
    console.log(i);  // 0, 1, 2 출력
    i++;
} while (i < 3);

```

- 코드 블록이 먼저 실행되고, 그 후에 조건을 평가하여 반복 여부를 결정합니다.

### 주요 차이점:

1. **`while` 문**:
    - 조건을 먼저 검사한 후 반복을 시작합니다.
    - 조건이 `false`일 경우 반복문이 **한 번도 실행되지 않을 수 있습니다**.
2. **`do...while` 문**:
    - 코드를 먼저 실행한 후 조건을 검사합니다.
    - 조건이 `false`이더라도 코드가 **최소 한 번은 실행됩니다**.

### 예시 비교:

- **`while` 문**: 조건을 먼저 확인하고 나서 실행
    
    ```jsx
    let x = 5;
    while (x < 3) {
        console.log(x);  // 실행되지 않음
        x++;
    }
    
    ```
    
- **`do...while` 문**: 조건을 나중에 확인하므로, 최소 한 번 실행
    
    ```jsx
    let x = 5;
    do {
        console.log(x);  // 5 출력 (조건과 상관없이 한 번 실행)
        x++;
    } while (x < 3);
    
    ```
    

### 결론:

- **`while` 문**은 반복 여부를 처음부터 결정하고, 조건이 `true`일 때만 실행됩니다.
- **`do...while` 문**은 코드를 한 번 실행한 후 조건을 평가하므로, **최소 한 번은 코드가 실행**됩니다.