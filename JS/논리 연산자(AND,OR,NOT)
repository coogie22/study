|| (OR) - 여러 개중에서 하나라도 true면 true를 반환(파이프라고 부름)

&& (AND) - 모든 값이 ture여야 true값을 반환(앰퍼샌드라고 부름)

! (NOT) - NOT은 반대로 true면 false로 바꿔서 반환

// 이름이 TOM이거나 , 성인이면 통과시키는 프로그램을 작성해라.

```jsx
const name1 = "TOM"; // 이름을 설정합니다.
const age = 19;     // 나이를 설정합니다.

if(name1 === "TOM" || age > 18){
    console.log("통과입니다.");
} else{
    console.log("통과하지 못했습니다.");
}

```

```jsx
const name1 = "TOM"; // 이름을 설정합니다.
const age = 10;     // 나이를 설정합니다.

if(name1 === "TOM" && age > 18){
    console.log("통과입니다.");
} else{
    console.log("통과하지 못했습니다.");
}
```

```jsx
// 나이를 입력받아 성인이 아니면 돌아가라는 메시지를 전달하는 프로그램을 작성하시오.

const age = prompt("나이:");
const isAdult = age > 19;

if(!isAdult){
    console.log("돌아가세요.");
}
```

### 코드 설명:

```jsx
const age = prompt("나이:");  // 사용자로부터 나이 입력받기
const isAdult = age > 19;    // 나이가 19세 초과인지 여부를 확인

if (!isAdult) {              // isAdult가 false인 경우
    console.log("돌아가세요.");  // "돌아가세요." 메시지를 출력
}

```

### 코드 동작 원리:

1. **`prompt("나이:")`**: 사용자가 입력한 나이를 문자열로 받아옵니다.
2. **`const isAdult = age > 19;`**: 입력된 나이(`age`)가 19보다 큰지 여부를 확인합니다.
    - 만약 `age`가 20 이상이면 `isAdult`는 `true`가 되고, 그렇지 않으면 `false`가 됩니다.
3. **`if (!isAdult)`**: `isAdult`가 `false`일 때 조건이 참이 됩니다.
    - `!isAdult`는 `isAdult`의 부정을 의미합니다. 즉, `isAdult`가 `false`이면 `!isAdult`는 `true`가 됩니다.

### 예시:

- **나이가 20세**인 경우:
    - `age > 19`는 `true`가 되어 `isAdult`는 `true`가 됩니다.
    - `!isAdult`는 `false`가 되므로, `if` 문은 실행되지 않으며 "돌아가세요." 메시지는 출력되지 않습니다.
- **나이가 19세 이하**인 경우:
    - `age > 19`는 `false`가 되어 `isAdult`는 `false`가 됩니다.
    - `!isAdult`는 `true`가 되어, `if` 문이 실행되며 "돌아가세요." 메시지가 출력됩니다.

### 결론:

- 코드의 의도는 성인이 아닌 경우(19세 이하) "돌아가세요."라는 메시지를 출력하는 것입니다.
- *성인(20세 이상)**인 경우는 메시지가 출력되지 않습니다.

### 주의:

- `prompt`는 문자열을 반환하므로, 비교 연산 시 `age`를 숫자로 변환해야 합니다. 예를 들어:
    
    ```jsx
    const age = parseInt(prompt("나이:"), 10);
    
    ```
    

우선순위

and가 or보다 높음

### 코드 설명:

```jsx
const gender = "F";
const name1 = "Jane";
const isAdult = true; // isAdult는 불리언 값으로 수정 (문자열이 아닌 true/false로)

if(gender === "M" && name1 === "Mike" || isAdult){
    console.log("통과입니다");
}

```

### 논리 연산자 우선순위:

1. **`&&` (AND)** 연산자는 **`||` (OR)** 연산자보다 **우선순위가 높습니다**.
    - 따라서 `gender === "M" && name1 === "Mike"` 부분이 먼저 계산됩니다.
2. 그 다음에 `|| isAdult`가 계산됩니다.
    - **AND** 조건이 false라 하더라도, **OR** 조건에서 하나라도 true이면 전체 조건이 true가 됩니다.

### 코드 동작:

- `gender === "M"`: `gender`가 `"F"`이므로 이 조건은 `false`입니다.
- `name1 === "Mike"`: `name1`이 `"Jane"`이므로 이 조건도 `false`입니다.
    - 따라서 `gender === "M" && name1 === "Mike"`는 전체적으로 `false`가 됩니다.
- 그 다음에 **`|| isAdult`*가 적용되는데, `isAdult`는 `true`이므로 최종 결과는 `true`입니다.
- 따라서 `"통과입니다"`가 출력됩니다.

### 중요한 점:

- `isAdult`는 문자열 `"true"`가 아니라 **불리언 값**인 `true`로 수정해야 정확한 동작이 보장됩니다.
- **`&&` 연산**은 **`||`보다 우선** 계산되므로, 먼저 `gender === "M" && name1 === "Mike"`가 계산된 후 `isAdult`가 적용됩니다.

### 결론:

- 설명하신 내용처럼 `&&` 연산이 먼저 계산되고, 그 후에 `||` 연산이 적용되어 하나라도 `true`이면 통과합니다.