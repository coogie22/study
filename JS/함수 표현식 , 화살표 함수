이 코드가 실행되는 이유는 JavaScript의 **호이스팅(hoisting)** 개념 때문입니다. 호이스팅이란, JavaScript 엔진이 코드를 실행할 때 **변수 선언**과 **함수 선언**을 코드의 **상단으로 끌어올리는** 동작을 말합니다.

### 함수 호이스팅 설명

```jsx
sayHello();
function sayHello() {
    console.log("Hello");
}

```

위 코드에서, **함수 선언부**가 실제로 작성된 위치보다 **코드의 상단으로 끌어올려집니다**. 즉, 코드가 실행되기 전에 **JavaScript 엔진**은 함수 선언을 미리 처리합니다.

### 어떻게 동작하는가?

JavaScript는 코드를 실행하기 전에 **함수 선언**을 **스코프의 상단으로 이동**시킵니다. 즉, 함수 선언은 코드가 실행되기 전에 미리 인식되기 때문에, 함수 호출이 실제 선언부보다 위에 있어도 **문제가 발생하지 않습니다**.

### 코드의 실제 실행 순서:

```jsx
function sayHello() {  // 함수 선언이 코드의 상단으로 호이스팅됩니다.
    console.log("Hello");
}

sayHello();  // 함수 호출이 뒤에 있지만, 미리 호이스팅된 함수 선언을 참조하여 실행됩니다.

```

- `sayHello` 함수는 **호이스팅**에 의해 코드가 실행되기 전에 이미 메모리에 **등록**되었기 때문에, **함수 선언 후에 호출**한 것과 동일한 효과를 냅니다.

### 결론

**함수 선언**은 호이스팅되어 코드의 어느 위치에서든 호출할 수 있기 때문에, 함수 호출이 함수 선언보다 **앞에 있어도** 문제가 없습니다.

따라서, `sayHello();`가 함수 선언보다 위에 있어도 **정상적으로 실행**됩니다.

화살표 함수

- *화살표 함수(Arrow Function)**는 ES6에서 도입된 함수 선언 방식으로, 기존 함수 선언 방식보다 간결하고 몇 가지 고유한 특징을 가지고 있습니다. 특히 **`this`** 키워드의 처리 방식이 기존 함수와 다릅니다.

### 1. 화살표 함수 기본 문법

화살표 함수는 `function` 키워드를 사용하지 않고, **`=>`**(화살표) 기호를 사용해 함수를 정의합니다.

### 기본 형식:

```jsx
const 함수명 = (매개변수) => {
    // 함수 내용
};

```

### 예시:

```jsx
const add = (a, b) => {
    return a + b;
};

console.log(add(2, 3)); // 출력: 5

```

### 한 줄로 작성 가능 (암시적 반환):

만약 함수 내부가 **단일 식(expression)**으로 이루어져 있다면, **`return`**을 생략할 수 있습니다.

```jsx
const add = (a, b) => a + b;
console.log(add(2, 3)); // 출력: 5

```

### 매개변수가 하나일 때:

매개변수가 **하나일 경우**에는 **소괄호도 생략**할 수 있습니다.

```jsx
const square = x => x * x;
console.log(square(4)); // 출력: 16

```

### 매개변수가 없을 때:

매개변수가 없으면 빈 괄호를 사용해야 합니다.

```jsx
const sayHello = () => console.log("Hello!");
sayHello(); // 출력: Hello!

```

### 2. 화살표 함수의 주요 특징

### 1) **간결한 문법**:

화살표 함수는 일반 함수 선언보다 훨씬 간결하게 작성할 수 있습니다. 특히 짧은 함수나 콜백 함수에 자주 사용됩니다.

### 2) **`this` 바인딩**:

화살표 함수는 **자신만의 `this`를 가지지 않습니다**. 일반 함수에서는 `this`가 **함수를 호출한 객체**를 가리키지만, 화살표 함수는 **상위 스코프**의 `this`를 **상속**합니다.

### 예시: 일반 함수에서의 `this`

```jsx
const person = {
    name: "Tom",
    greet: function() {
        console.log(this.name); // 'this'는 person 객체를 가리킴
    }
};

person.greet(); // 출력: Tom

```

### 예시: 화살표 함수에서의 `this`

```jsx
const person = {
    name: "Tom",
    greet: () => {
        console.log(this.name); // 'this'는 전역 객체를 가리킴
    }
};

person.greet(); // 출력: undefined (브라우저에서는 window 객체를 가리킴)

```

화살표 함수는 **`this`가 상위 스코프**에 바인딩되어 있기 때문에, 객체 메서드로는 적합하지 않고, 특히 콜백 함수나 비동기 처리에서 유용합니다.

### 3) **`arguments` 객체 없음**:

화살표 함수는 **`arguments` 객체를 가지지 않습니다**. 만약 `arguments` 객체가 필요하다면, 상위 함수에서 전달받거나 `rest` 파라미터를 사용해야 합니다.

```jsx
const showArgs = () => {
    console.log(arguments); // 오류 발생, 화살표 함수는 arguments를 참조할 수 없음
};

showArgs(1, 2);

```

대신, `rest` 파라미터를 사용할 수 있습니다:

```jsx
const showArgs = (...args) => {
    console.log(args); // 출력: [1, 2]
};

showArgs(1, 2);

```

### 3. 화살표 함수의 사용 예시

### 1) 배열 메서드에서 자주 사용

화살표 함수는 **`map`, `filter`, `reduce`**와 같은 배열 메서드에서 콜백 함수로 자주 사용됩니다.

```jsx
const numbers = [1, 2, 3, 4, 5];

// 화살표 함수로 짧게 작성 가능
const doubled = numbers.map(n => n * 2);
console.log(doubled); // 출력: [2, 4, 6, 8, 10]

```

### 2) 비동기 작업

콜백 함수나 비동기 작업을 처리할 때, **`this` 바인딩 문제**를 피할 수 있어 유용합니다.

```jsx
function Timer() {
    this.seconds = 0;
    setInterval(() => {
        this.seconds++; // 화살표 함수이므로, 'this'는 Timer 객체를 가리킴
        console.log(this.seconds);
    }, 1000);
}

const timer = new Timer();

```

### 4. 화살표 함수와 일반 함수 비교

| 특징 | **화살표 함수** | **일반 함수** |
| --- | --- | --- |
| **`this`** | 상위 스코프의 `this`를 상속 | 호출된 객체에 따라 `this`가 결정됨 |
| **`arguments` 객체** | 없음 | 함수 호출 시의 `arguments`를 참조 가능 |
| **호출 가능 시점** | 함수 표현식처럼 정의된 이후에만 호출 가능 | 선언문일 경우, 호이스팅으로 언제든 호출 가능 |
| **문법** | 간결한 문법 제공 | `function` 키워드 사용 |
| **사용 용도** | 짧은 함수, 콜백, 비동기 작업에 적합 | 객체 메서드, 복잡한 로직에 적합 |

### 결론

- **화살표 함수**는 간결한 문법과 `this` 바인딩 처리로 **콜백 함수나 비동기 작업**에 매우 유용합니다.
- 하지만 **`this`나 `arguments`** 처리가 필요한 경우는 **일반 함수**가 더 적합합니다.