소프트웨어 공학에서 **의존성(Dependency)**는 한 컴포넌트, 모듈, 클래스, 함수, 또는 시스템이 다른 컴포넌트나 시스템에 의존하는 관계를 의미합니다. 즉, 어떤 요소가 다른 요소의 기능, 데이터, 서비스에 의존하는 상태를 나타냅니다. 의존성은 소프트웨어 설계의 중요한 개념으로, 시스템의 유지보수성과 확장성, 테스트 가능성에 큰 영향을 미칩니다.

의존성의 예
모듈 간 의존성: 모듈 A가 모듈 B에서 제공하는 함수나 데이터를 사용해야 할 때, A는 B에 의존한다고 말합니다.
라이브러리 의존성: 프로젝트에서 외부 라이브러리(예: lodash, jQuery)를 사용하면, 이 라이브러리에 의존하는 것입니다.
클래스 간 의존성: 객체지향 프로그래밍에서 한 클래스가 다른 클래스의 메서드를 호출하거나 데이터를 사용할 때 의존성이 발생합니다.
의존성이 중요한 이유
의존성은 소프트웨어를 효율적으로 설계하고 유지하는 데 중요한 역할을 합니다. 의존성을 잘 관리하지 못하면 유지보수성과 확장성이 저하될 수 있으며, 변화에 민감해져 변경에 취약한 소프트웨어가 될 수 있습니다.


소프트웨어

프로그램 + 프로그램의 개발, 운용, 보수에 필요한 정보 일체
개념적이고 무형적 (생산물의 구조가 코드 안에 숨어 있음)

소프트웨어의 특성

비가시성(Invisibility)
복잡성(Complexity)	
순응성(Conformity)	
복제 가능(Duplicability)	


소프트웨어 유형의 대해서

응용소프트웨어 - 비즈니스 업무 등 회사나 기관에서 사용하는 시스템
시스템 소프트웨어 - 운영체제 , 장치 드라이버 , 컴파일러
임베디드 소프트웨어 - 다른 시스템에 내장된 소프트웨어

