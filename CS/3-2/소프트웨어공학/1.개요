중간고사를 준비하는 데 도움이 되도록 **2주차부터 7주차까지**의 내용을 차례로 세세하게 설명하겠습니다.

---

### 제 2주: 소프트웨어 공학의 접근방법

소프트웨어 공학에서 소프트웨어를 개발하는 접근 방법은 매우 중요합니다. 소프트웨어는 **복잡성**, **규모**, **유지 보수의 어려움** 때문에 체계적인 접근이 필요합니다. 주요 접근 방법에는 다음이 있습니다:

1. **계획 중심적 접근 (Plan-Driven Approach)**
   - 모든 개발 과정을 철저히 계획하고, 문서화하여 진행하는 방식입니다.
   - **폭포수 모델**이 대표적인 예입니다.
   - 장점: 명확한 계획과 요구사항으로 예측 가능성이 높음.
   - 단점: 요구사항이 변할 경우 유연성이 부족함.

2. **애자일 접근 (Agile Approach)**
   - 고객과의 **지속적인 피드백**과 **변화에 빠르게 대응**하는 것을 중시합니다.
   - 작은 단위의 반복적 개발과 고객의 피드백을 기반으로 개발을 진행합니다.
   - 장점: 유연성과 적응성이 높음.
   - 단점: 명확한 계획이 없어 초기 예측이 어려울 수 있음.

소프트웨어 공학에서는 소프트웨어의 **복잡성**, **품질 관리** 문제 등을 해결하기 위해 **구조화된 방법론**이 필요하며, 이를 위한 다양한 모델과 기법이 개발되었습니다.

---

### 제 3주: 프로세스와 방법론

소프트웨어 개발을 체계적으로 관리하기 위해서는 **프로세스와 방법론**이 필요합니다.

1. **소프트웨어 개발 프로세스**: 
   - **프로세스**는 소프트웨어 개발의 **단계**를 설명하는 방법입니다. 각 단계는 소프트웨어를 만드는 데 필요한 활동을 체계적으로 정의합니다.
   - 주요 단계: **요구사항 분석**, **설계**, **구현**, **테스트**, **유지 보수**

2. **방법론(Methods)**:
   - **방법론**은 소프트웨어 개발 단계에서 사용할 수 있는 구체적인 **도구**나 **기법**입니다.
   - 예시: 설계 단계에서 UML(Unified Modeling Language)을 사용하는 것.

---

### 제 4주: 바람직한 프로세스의 특성

**바람직한 소프트웨어 개발 프로세스**는 다음과 같은 특성을 가져야 합니다:

1. **가시성**:
   - 각 단계가 명확히 정의되어 있어 누구나 현재 개발 상태를 파악할 수 있어야 합니다.

2. **제어 가능성**:
   - 각 단계에서 발생하는 문제나 오류를 쉽게 발견하고 수정할 수 있어야 합니다.

3. **적응성**:
   - 변경 사항이나 새로운 요구사항에 쉽게 적응할 수 있어야 합니다.

4. **효율성**:
   - 자원(시간, 인력, 비용)을 효율적으로 사용할 수 있는 구조여야 합니다.

5. **반복 가능성**:
   - 과거 프로젝트의 성공적인 프로세스를 다른 프로젝트에도 반복하여 적용할 수 있어야 합니다.

---

### 제 5주: 폭포수 모델 (Waterfall Model)

**폭포수 모델**은 소프트웨어 개발에서 가장 오래된 전통적인 모델로, 단계적으로 소프트웨어를 개발하는 방식입니다.

#### 특징:
1. **순차적 단계**: 요구사항 분석 → 설계 → 구현 → 테스트 → 배포 → 유지 보수 순으로 진행되며, 각 단계가 끝나야 다음 단계로 넘어갈 수 있습니다.
2. **명확한 문서화**: 각 단계에서 문서화가 철저하게 이루어집니다.
3. **초기 계획**: 요구사항이 명확하게 정의되고 변경이 어려운 프로젝트에 적합합니다.

#### 장점:
- 각 단계가 끝나야 다음 단계로 넘어가기 때문에 체계적이고 관리가 용이합니다.
- 요구사항이 명확한 경우, 프로젝트의 흐름을 예측하기 쉽습니다.

#### 단점:
- 단계가 고정되어 있어 **변화에 적응하기 어려움**.
- 프로젝트 중간에 요구사항 변경이 발생하면 큰 비용과 시간이 소요됩니다.

---

### 제 6주: 프로토타이핑 모델 (Prototyping Model)

**프로토타이핑 모델**은 **사용자 피드백**을 기반으로 **프로토타입(시제품)**을 반복적으로 개발하는 방식입니다.

#### 특징:
1. **시제품 개발**: 최종 소프트웨어를 개발하기 전에 사용자 요구사항을 이해하고 피드백을 받기 위해 간단한 프로토타입을 개발합니다.
2. **반복적 개발**: 프로토타입을 사용자에게 제공하여 피드백을 받고, 이를 바탕으로 수정 및 개선을 반복합니다.
3. **최종 소프트웨어 개발**: 여러 번의 피드백을 통해 최종 요구사항을 확정하고 본격적으로 소프트웨어를 개발합니다.

#### 장점:
- 사용자의 요구사항을 명확히 파악할 수 있어 **오류를 줄일 수 있음**.
- 변경 사항에 유연하게 대응할 수 있어 **사용자 만족도가 높음**.

#### 단점:
- 반복적 개발로 인해 시간이 오래 걸릴 수 있으며, 프로토타입을 만들면서 불필요한 작업이 발생할 수 있습니다.
- 최종 소프트웨어의 구조가 초기부터 명확하지 않으면 **복잡한 시스템**이 될 수 있습니다.

---

### 제 7주: 나선형 모델 (Spiral Model)

**나선형 모델**은 **위험 관리**를 중심으로 한 반복적이고 점진적인 개발 모델입니다. 주로 대규모 시스템이나 프로젝트에서 사용되며, **폭포수 모델**과 **프로토타이핑 모델**의 장점을 결합한 방식입니다.

#### 특징:
1. **반복적 주기**: 프로젝트를 여러 번 반복하는 **주기(Iteration)**로 나누어 개발이 진행됩니다.
2. **위험 분석**: 각 반복 주기마다 발생할 수 있는 위험을 분석하고, 이를 해결하는 방법을 찾아 적용합니다.
3. **계획 - 개발 - 평가**: 각 반복 주기에서 요구사항을 분석하고 설계한 후 구현 및 테스트를 거쳐 평가합니다.

#### 4단계 주기 (각 단계마다 반복됨):
1. **계획 수립(Planning)**: 목표를 설정하고 프로젝트를 계획합니다.
2. **위험 분석(Risk Analysis)**: 프로젝트 진행 중 발생할 수 있는 위험 요소를 식별하고 관리 방법을 설정합니다.
3. **개발 및 테스트(Engineering)**: 실제 소프트웨어 구현과 테스트를 진행합니다.
4. **고객 평가(Evaluation)**: 고객이나 이해관계자로부터 피드백을 받고 다음 반복 주기에 반영합니다.

#### 장점:
- **위험 관리**에 강점을 가집니다. 각 주기마다 위험 요소를 분석하고 이를 줄이기 위한 대책을 마련할 수 있습니다.
- 대규모 프로젝트나 복잡한 시스템에 적합합니다.
- 초기에는 작은 부분만 개발하고, 점진적으로 전체 시스템을 확장해 나갈 수 있어 **유연성**이 높습니다.

#### 단점:
- 각 반복 주기가 끝날 때마다 **위험 분석**과 **평가**를 진행하기 때문에 소규모 프로젝트에는 부적합할 수 있습니다.
- **복잡한 관리**가 필요하여 개발 비용이 증가할 수 있습니다.

---

### 요약

소프트웨어 공학의 각 접근 방식과 방법론들은 서로 다른 프로젝트와 상황에 맞춰 선택될 수 있습니다. **폭포수 모델**은 순차적이고 계획 중심적이라 예측 가능성이 높은 반면, **프로토타이핑 모델**은 사용자 피드백을 반영하여 요구사항 변경에 유연하게 대응할 수 있습니다. **나선형 모델**은 위험 관리에 초점을 맞춰 대규모 프로젝트에서 효과적입니다.

각 모델의 장단점을 이해하고, 적절한 모델을 선택하는 것이 중요합니다.