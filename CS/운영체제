명품 운영체제 OPERATING SYSTEM (수정판) - 황기태 지음

터미널에서 현재 날짜와 시간 기록하기 

echo %date% %time%

1.운영체제 개념

1.1 운영체제 정의 
운영체제(OPERATING SYSTEM)란?
운영체제에 대한 정의는 다양하다

"사용자와 컴퓨터 하드웨어 사이에서 중계 역할을 하면서, 프로그램의 실행을 관리하고 제어하는 시스템  소프트웨어"

운영체제는 모든 컴퓨터 "자원(resource)"을 관리한다
여기서 "자원"이란
* 하드웨어 자원 - CPU , 캐시(cache) , 메모리(RAM) , 키보드 , 마우스 , 디스플레이 , 하드디스크 등
* 소프트웨어 자원 - 응용프로그램들
* 데이터 자원 - 파일 , 데이터베이스 등
운영체제는 컴퓨터 자원이 모든 사용자와 모든 응용프로그램에 의해 잘 공유되도록 관리하는 소프트웨어이다.

운영체제는 자원을 "독점(exclusive)"한다.
이번에는 "독점"이란 단어에 주목한다
* 자원에 대한 접근과 관리 권한이 오직 운영체제에게만 있다는 것이다
PC를 사용하면서 파일을 만든다면 그것은 오로지 운영체제의 의해 실행된다
파일을 만들고 읽고 쓰는 응용프로그램들도 직접 하드 디스크에 접근할 수 없다 
응용프로그램은 운영체제에게 요청하며 운영체제만이 파일을 만들고 읽고 쓴다

왜 운영체제가 독점하는 것일까 ?
* 자원에 대한 접근 권한을 운영체제만이 가지게 함으로써, 사용자들과 응용프로그램들로부터 자원에 대한
* 훼손을 막고 그들 사이에 자원을 효과적으로 공유할 수 있도록 하기 위함이다.

운영체제는 "관리자(supervisor)"이다.
* "관리"는 크게 네 부분으로 구분할 수 있다

첫째 , 사용자에 대한 관리로서 , 사용자의 로그인 계정 , 비밀번호 , 우선순위 , 통계 정보 등 관리이다
둘째 , 프로그램의 실행에서 종료까지 프로그램의 실행에 관한 일체의 자원 관리이다. 프로그램 적재 , 메모리 할당 및 메모리 보호 , 스케줄링 , 저장 공간 관리 등이다.
셋째 , 성능 관리이다. 운영체제는 자원의 활용률을 높여 가능하면 많은 프로그램이 동시에 실행될 수 있도록 처리율을 높이고,  실행에 빠른 응답을 제공하는 등 성능을 극대화하는데 관리의 목표를 둔다.
넷째 , 외부의 침입으로부터 사용자와 컴퓨터 자원을 안전하게 보호하는 보안 관리이다.

운영체제는 "소프트웨어(software)"이다.
구체적으로 운영체제는 "커널(kernel)"이라고 불리는 핵심 코드, 사용자의 컴퓨터 사용을 돕는 "UI(User Interface)"를 비롯한 "도구 프로그램들(tool/utility)"이나
장치를 직접 제어하는 디바이스 드라이버"(device driver)"라는 소프트웨어로 구성된다.
* 커널은 핵(core)라는 뜻으로, 좁은 의미에서 운영체제로 불리는데 앞서 설명한 "관리" 기능을 수행하는 핵심 코드이다. 커널은 운영체제가 설치된 하드 디스크 등
저장 장치에 저장되어 있다가 컴퓨터가 부팅될 때 메모리에 적재된다. 그 후 커널 코드는 응용프로그램이 자원을 접근하기 위해 호출할 때 실행되어
CPU , 메모리 , 키보드 , 디스플레이 , 디스크 장치 등 하드웨어를 제어함
운영체제 패키지에 동봉되어 사용자가 컴퓨터를 쉽게 사용할 수 있도록 돕는 도구 프로그램에는 쉘 , 탐색기 , 작업관리자 , 제어판 등이 있다.


1.2 운영체제의 목적과 기능
운영체제가 존재하는 이유와 본질적인 목적은 무엇일까?
* 사용자의 컴퓨터 사용 편리성
* 자원의 효율적 사용과 관리

* 운영체제는 사용자가 편리하게 사용할 수 있도록 하는 것에 더불어, 컴퓨터 자원의 낭비를 줄이고, CPU를 비롯하여
* 놀고 있는 자원이 없도록 효율적으로 관리하는 것이 목적이자 목표이다.

운영체제 기능

* CPU/프로세스 관리(process management)
운영체제는 저장 장치에 저장된 프로그램을 메모리에 적재하고 이를 "프로세스"라고 한다.
프로세스 실행 , 새로운 프로세스 생성 , 프로세스가 입출력을 요청하거나 CPU 할당 시간을 다 소모하였을 때
프로세스를 중단시키고 대기 중인 프로세스 숭 하나를 선택하는 "스케줄링" , 프로세스 종료 등 프로세스를 관리하는 기능을 수행한다.

* 메모리 관리(memory management)
각 프로세스에 적절한 메모리를 할당하고 변환하며, 프로세스에게 할당된 메모리를 다른 프로세스로부터 보호한다
또한 메모리가 부족할 때 하드 디스크와 같은 저장 장치에 메모리 일부 부분의 내용을 저장해두고 필요할 때 다시 "적재(가상 메모리 기법)"하는 기능을 수행한다

* 파일 시스템 관리(file system management)
각 파일이 저장된 위치 정보 등 파일마다 파일 정보를 관리하며, 전체 파일 시스템의 크기 , 저장 장치의 빈 곳과 사용중인 곳 등 파일 시스템 정보를 관리하며
파일과 디렉토리를 생성하고 관리한다 파일이 기록된 위치를 아는 것은 오직 운영체제 이므로, 운영체제는 파일 읽기 , 파일 쓰기 , 파일 삭제 등 파일을 다루는 모든 기능을 수행한다.

* 장치 관리(device management)
키보드 , 마우스 , 디스플레이 , 프린터 등 다양한 입출력 장치들과 저장 장치를 제어하고 물리적인 입출력을 실행한다.

* 네트워크 관리
네트워크 장치를 관리하고 네트워크 입출력을 실행한다.

* 보안 관리
외부의 공격으로부터 컴퓨터 시스템과 사용자 정보를 보호한다.


1.3 운영체제와 응용소프트웨어
운영체제와 응용소프트웨어의 차이점

* 목적의 차이
운영체제는 컴퓨터 하드웨어나 프로그램 , 파일 등 자원을 관리하여 응용소프트웨어가 실행되는 동안 자원에 대한 서비스를 제공하는 소프트웨어이다
응용소프트웨어는 컴퓨터 사용자들을 위해 특정 작업을 수행하는 소프트웨어로 웹 브라우저 , 한글과 같은 문서 편집기 음악이나 동영상 감상을 위한 플레이어 등이 여기에 속한다
응용소프트웨어는 사용자 편리와 필요를 위해 존재하고 , 운영체제는 컴퓨터의 자원을 잘 관리하여 응용소프트웨어에게 자원 액세스 등 핵심 서비스를 제공하고 효율적으로 사용되도록 하는데 있다.

* 기능의 차이
운영체제는 메모리 관리 , 프로세스 관리 , 작업(프로세스나 스레드) , 스케줄링 , 하드웨어 장치 제어 , 파일 입출력 관리 등의 기능을 수행하며 , 응용소프트웨어는 사용자를 위해 개발된 특정 목적만 수행한다

* 개발 언어의 차이
운영체제의 개발에는 운영체제 코드의 빠른 실행을 위해 C/C++ , 어셈블리어를 이용하며 , 응용소프트웨어는 C/C++뿐 아니라, Java , Python , C#등 다양한 언어를 사용한다.

* 실행의 차이
운영체제는 하드 디스크와 같은 저장 장치의 특정 위치에 저장되어 있다가 컴퓨터를 켜면 메모리에 적재되어 컴퓨터를 끌 때까지 메모리에 상주하면서 
컴퓨터 자원을 관리하고 사용자와 응용소프트웨어의 요청을 처리한다 반면, 응용소프트웨어는 사용자의 명령이나 다른 응용소프트웨어의 명령이 있을 때 실행되고 작업이 끝나거나 사용자가 강제로 종료할 때 종료된다.

* 자원에 대한 접근의 차이
운영체제는 컴퓨터의 모든 자원에 대해 배타적 접근 권한을 가짐 그러므로 응용소프트웨어가 컴퓨터 자원을 사용하고자 할 때는 반드시 운영체제에게 요청해야하며, 운영체제는
응용소프트웨어로부터 요청을 받아 대신 자원에 접근한다. 
응용소프트웨어가 운영체제에게 요청하는 과정을 "시스템 호출(system call)"이라고 한다


2.운영체제의 태동
1940년대 잔지식 디지털 컴퓨터가 만들어졌는데 이때는 컴퓨터에 다른 프로그램을 실행키려면
전선을 해체하고 다시 계획을 세워서 스위치를 조작하고 전선을 연결해야만 했다
이런 방식의 컴퓨터를 "고정 프로그램 컴퓨터(fixed program computer)"라고 한다

2.2 하드웨어와 소프트웨어를 분리시킨 내장 프로그래밍 등장(1945~)
폰노이만(von neumann)은 하드웨어와 소프트웨어를 컴퓨터에서 분리하는 "내장 프로그램 컴퓨터(stored program computer)" 개념을 최초로 발표함


* 내장 프로그램 컴퓨터
"내장 프로그램(stored program)"이란 컴퓨터의 구조를 CPU와 전자식 메모리로 나누고, 프로그램의 명령(코드)들을 전자식 메모리에 적재하고
CPU가 메모리에서 명령들을 하나씩 CPU 내부로 가지고와서 처리하는 새로운 방식의 컴퓨터 개념이다

CPU(중앙처리장치)는 제어장치 , 연상장치 , 레지스터들로 구성된다
연산장치는 덧셈 , 뺄셈 , 곱셈 , 나눗셈의 산술 연산과 논리곱(and) , 논리합(or) , 논리부정(not)의 논리 연산을 처리하는 하드웨어다
레지스터는 연산을 실행하는 동안 명령과 데이터를 일시 저장하는 저장소이다


제어 장치는 메모리에서 명령을 읽어오고 명령을 해석하고, 연산장치에게 명령에 지시된 연산을 수행하도록 제어한다
메모리 내의 명령이나 데이터는 주소(address)로 액세스되며, CPU에 있는 레지스터들은 이렇게 사용된다
다음에 처리할 명령의 메모리 주소는 PC에 저장되며, PC에 담긴 주소는 "MAR(memory address register)"을 통해
메모리로 출력된다 "IR(instruction register)"은 제어장치가 메모리로부터 읽어 온 명령을 저장한다
제어장치가 메모리로부터 읽어온 명령이나 데이터는 "MDR(memory data register)"에 먼저 저장되고, 명령이면 다시 IR로 이동한다
"AC(accumulator register)"는 계산에 사용될 데이터나 계산 결과를 저장하는데 사용된다


* 내장 프로그램의 출현 - 하드웨어와 소프트웨어의 분리
컴퓨터는 하드웨어는 그대로 두고, 실행을 원하는 프로그램을 메모리에 적재한 후 CPU가 실행하는 식이다

* 내장 프로그램 컴퓨터 출현의 의미 정리
- 컴퓨터 구조에서 CPU와 메모리 분리
- 하드웨어와 소프트웨어 개념 분리
- 실행할 프로그램은 메모리에 담고, CPU가 프로그램을 실행하는 방식
- 프로그램은 입력 장치를 통해 메모리에 적재


2.3 프로그램 로더의 발견 - 운영체제 개념의 시작

- 로더 프로그램의 필요 - 운영체제의 싹
개발자가 목적 프로그램뿐 아니라 목적 프로그램을 적재하는 코드도 함께
작성해야만 했다 목적 프로그램을 읽어 들이는 이 코드를 "로더(loader)"라고 불렀다


2.4 원시 운영체제 GM OS 탄생(1955년)
GM이 펀치 카드에 담긴 프로그램을 메모리에 적재하는 제대로 된 로더 프로그램을 개발했고 오늘날
디스크 장치에 있는 사용자 프로그램을 적재시키는 것과 동일한 개념이 서게 된 것이다
이로써 사용자는 "자가 로더(self-loader)"를 작성할 필요 없이 프로그램만 작성하면 됐다
GM은 이 로더를 "모니터(monitor)"라고 불렀고 후세대는 "GM OS(general montors opreating system)"라고 불렀다
현대에 와서는 사용자 프로그램을 읽어 실행시켜준다는 점에서 GM OS를 최초의 원시 운영체제라고 부른다



2.5 최초의 운영체제 GM-NAA I/O 탄생(1956~1957년)
NAA사와 공동으로 GM이 만들어 놓은 로더 프로그램을 확장하여, IBM 704에 사용할 최초의
운영체재 GM-NAA I/O 소프트웨어를 개발하였다 이게 오늘날 볼 때 일종의 "배치 운영체제(batch operating system)"였다.


3.2 배치 운영체제
* 출현 배경
컴퓨터의 노는 시간(idle time)을 줄여 "컴퓨터의 활용률을 향상"시킬 필요에 의해 "배치 운영체제(batch operating system)"가 개발되었다

* 배치 운영체제 컴퓨터 시스템
"배치(batch)"란 한 개발자가 작성한 펀치 카드의 묶음이며 "배치 작업(batch job)"을 줄여 부르는 말이기도 하다 그러므로 배치가 하나의 프로그램인 셈이다
배치 운영체제로 작업을 처리하는 방식을 "배치 처리(batch processing)라고 부른다"

* 배치의 대한 특징
여러 배치 작업들을 모아서 한꺼번에 실행하되 한 번에 한 개씩 순차적으로 실행하고
비대화식이며, 프린터에 결과를 출력하며 작업을 요청한 한참 뒤에나 결과를 받는다.


3.3 다중 프로그래밍(multiprogramming) 운영체제

* 출현 배경
1960년대 중반 하드웨어 기술의 발전이 급격히 이루어져 CPU와 메모리 등 하드웨어 속도가 개선되고
컴퓨터 가격이 상승하였다 그러므로 컴퓨터의 "처리율(throighput , 단위 시간당 처리하는 작업의 개수)"을 높이기 위해 
CPU를 보다 효율적으로 사용하는 방법을 고안해야 했다.


* 다중 프로그래밍 기법

- 다중 프로그래밍은 여러 프로그램을 메모리에 올려놓고 동시에 실행시키는 기법으로, 초기 다중 프로그래밍 기법은
  CPU가 한 프로그램을 실행하다 I/O가 발생하면 입출력이 완료될 때까지 CPU가 메모리에 적재된 다른 프로그램을 실행하게 하여 CPU의 노는 시간을 줄인다.


